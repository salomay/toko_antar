import{appendErrors as r}from"react-hook-form";import{toNestError as e}from"@hookform/resolvers";const o=(e,o)=>{const s={};for(;e.length;){const t=e[0],{code:n,message:a,path:i}=t,c=i.join(".");if(!s[c])if("unionErrors"in t){const r=t.unionErrors[0].errors[0];s[c]={message:r.message,type:r.code}}else s[c]={message:a,type:n};if("unionErrors"in t&&t.unionErrors.forEach(r=>r.errors.forEach(r=>e.push(r))),o){const e=s[c].types,a=e&&e[t.code];s[c]=r(c,o,s,n,a?[].concat(a,t.message):t.message)}e.shift()}return s},s=(r,s,t={})=>async(n,a,i)=>{try{return{errors:{},values:await r["sync"===t.mode?"parse":"parseAsync"](n,s)}}catch(r){return{values:{},errors:r.isEmpty?{}:e(o(r.errors,!i.shouldUseNativeValidation&&"all"===i.criteriaMode),i)}}};export{s as zodResolver};
//# sourceMappingURL=zod.modern.js.map
