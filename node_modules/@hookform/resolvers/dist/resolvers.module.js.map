{"version":3,"file":"resolvers.module.js","sources":["../src/toNestError.ts"],"sourcesContent":["import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  const fieldErrors: FieldErrors<TFieldValues> = {};\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    // Native validation (web only)\n    if (\n      options.shouldUseNativeValidation &&\n      field &&\n      'reportValidity' in field.ref\n    ) {\n      field.ref.setCustomValidity(errors[path].message || '');\n      field.ref.reportValidity();\n    }\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"],"names":["toNestError","errors","options","fieldErrors","path","field","get","fields","shouldUseNativeValidation","ref","setCustomValidity","message","reportValidity","set","Object","assign"],"mappings":"+CASaA,IAAAA,EAAc,SACzBC,EACAC,GAEA,IAAMC,EAAyC,GAC/C,IAAK,IAAMC,KAAQH,EAAQ,CACzB,IAAMI,EAAQC,EAAIJ,EAAQK,OAAQH,GAIhCF,EAAQM,2BACRH,GACA,mBAAoBA,EAAMI,MAE1BJ,EAAMI,IAAIC,kBAAkBT,EAAOG,GAAMO,SAAW,IACpDN,EAAMI,IAAIG,kBAGZC,EACEV,EACAC,EACAU,OAAOC,OAAOd,EAAOG,GAAO,CAAEK,IAAKJ,GAASA,EAAMI,OAItD,OAAON"}